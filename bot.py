# bot.py
import os
import json
import math
import asyncio
import logging
from datetime import datetime, timezone, timedelta
from collections import defaultdict, deque
from typing import Deque, Dict, List, Tuple, Optional

import aiosqlite
from aiohttp import ClientSession, web

from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

logging.basicConfig(level=logging.INFO)

# ====== –ü–ê–†–ê–ú–ï–¢–†–´ –ß–ï–†–ï–ó ENV ======
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü–æ—Ä–æ–≥ –≤—Ö–æ–¥–∞ –≤ "–Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é –∑–æ–Ω—É", –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (1.0 = -1.0%)
START_NEG_PCT = float(os.getenv("START_NEG_PCT", "1.0"))

# –†–∞–∑–º–µ—Ä —Å—Ç—É–ø–µ–Ω–∏-–∞–ª–µ—Ä—Ç–∞ –≤ –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö (20 –±.–ø. = 0.20%)
STEP_BPS = int(os.getenv("STEP_BPS", "20"))

# –ü–µ—Ä–∏–æ–¥ –æ–ø—Ä–æ—Å–∞ –≤—Å–µ—Ö –ø–∞—Ä, —Å–µ–∫—É–Ω–¥
POLL_SECONDS = int(os.getenv("POLL_SECONDS", "30"))

# –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –±–µ–∑ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
RESET_MIN = int(os.getenv("RESET_MIN", "30"))

# –°–∏–ª—å–Ω—ã–π –∞–ª–µ—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‚àí2%)
STRONG_ALERT_PCT = float(os.getenv("STRONG_ALERT_PCT", "2.0"))
STRONG_COOLDOWN_MIN = int(os.getenv("STRONG_COOLDOWN_MIN", "60"))

DB_PATH = "subs.db"

# ====== –ü–ê–ú–Ø–¢–¨/–°–û–°–¢–û–Ø–ù–ò–Ø ======
last_step_idx: Dict[str, int] = defaultdict(lambda: -1)  # –ø–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è "—Å—Ç—É–ø–µ–Ω—å" –¥–ª—è —Å–∏–º–≤–æ–ª–∞
last_below_ts: Dict[str, datetime] = defaultdict(lambda: datetime.fromtimestamp(0, tz=timezone.utc))
recent_rates: Dict[str, Deque[Tuple[datetime, float]]] = defaultdict(lambda: deque(maxlen=10))  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
last_strong_alert_at: Dict[str, datetime] = defaultdict(lambda: datetime.fromtimestamp(0, tz=timezone.utc))

# ====== –ë–î –ü–û–î–ü–ò–°–ß–ò–ö–û–í ======
CREATE_SQL = """
CREATE TABLE IF NOT EXISTS subscribers (
  chat_id INTEGER PRIMARY KEY,
  joined_at TEXT
);
"""

async def db_init():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(CREATE_SQL)
        await db.commit()

async def add_sub(chat_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO subscribers (chat_id, joined_at) VALUES (?, ?)",
            (chat_id, datetime.now(timezone.utc).isoformat()),
        )
        await db.commit()

async def remove_sub(chat_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM subscribers WHERE chat_id = ?", (chat_id,))
        await db.commit()

async def get_all_subs() -> List[int]:
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT chat_id FROM subscribers")
        rows = await cur.fetchall()
        return [r[0] for r in rows]

# ====== –£–¢–ò–õ–ò–¢–´ ======
def pct(rate_float: float) -> float:
    # –∏–∑ –¥–æ–ª–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã (-0.0123 -> -1.23)
    return rate_float * 100.0

def bps(rate_float: float) -> float:
    # –∏–∑ –¥–æ–ª–∏ –≤ –±–∞–∑–∏—Å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã (-0.0123 -> -123.0)
    return rate_float * 10000.0

def fmt_pct(rate_float: float) -> str:
    return f"{pct(rate_float):.2f}%"

def human_eta_ms(ms: Optional[int]) -> str:
    if ms is None:
        return "‚Äî"
    dt = datetime.fromtimestamp(ms / 1000, tz=timezone.utc) - datetime.now(timezone.utc)
    if dt.total_seconds() <= 0:
        return "soon"
    h, rem = divmod(int(dt.total_seconds()), 3600)
    m, _ = divmod(rem, 60)
    return f"{h}h {m}m"

def step_index(current_pct_abs: float, start_neg_pct: float, step_pct: float) -> int:
    """
    current_pct_abs ‚Äî –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞, –Ω–∞–ø—Ä. 1.37 (–¥–ª—è -1.37%)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å —Å—Ç—É–ø–µ–Ω–∏: 0 –¥–ª—è -1.20%, 1 –¥–ª—è -1.40% –ø—Ä–∏ step=0.20% –∏ —Ç.–¥.
    """
    extra = current_pct_abs - start_neg_pct
    if extra < 0:
        return -1
    return math.floor(extra / step_pct)

# ====== –ë–ò–ù–ê–ù–° –≠–ù–î–ü–û–ò–ù–¢–´ ======
FAPI_URL = "https://fapi.binance.com/fapi/v1/premiumIndex"  # USD‚ìà-M
DAPI_URL = "https://dapi.binance.com/dapi/v1/premiumIndex"  # COIN-M

async def fetch_all_pairs(session: ClientSession) -> List[dict]:
    """
    –ó–∞–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã USD‚ìà-M –∏ COIN-M —Å —Ç–µ–∫—É—â–∏–º funding.
    –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å symbol ‚Äî –ø—Ä–∏—Ö–æ–¥–∏—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –≤—Å–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º.
    """
    results: List[dict] = []
    for url in (FAPI_URL, DAPI_URL):
        try:
            async with session.get(url, timeout=20) as resp:
                data = await resp.json()
                if isinstance(data, list):
                    results.extend(data)
                elif isinstance(data, dict):
                    results.append(data)
        except Exception as e:
            logging.warning(f"Fetch error {url}: {e}")
    return results

# ====== –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –û–ü–†–û–°–ê ======
async def poll_loop(bot: Bot):
    step_pct = STEP_BPS / 100.0            # 20 –±.–ø. -> 0.20%
    start_neg_pct = START_NEG_PCT          # 1.0 -> -1.0%

    async with ClientSession() as session:
        while True:
            try:
                all_rows = await fetch_all_pairs(session)
                now = datetime.now(timezone.utc)

                subs = await get_all_subs()
                if not subs:
                    await asyncio.sleep(POLL_SECONDS)
                    continue

                for row in all_rows:
                    sym = row.get("symbol")
                    r_str = row.get("lastFundingRate")
                    nextT = row.get("nextFundingTime")
                    if not sym or r_str is None:
                        continue

                    try:
                        r = float(r_str)  # –¥–æ–ª—è, –Ω–∞–ø—Ä. -0.0123 = -1.23%
                    except Exception:
                        continue

                    # –∫–æ–ø–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç–µ–º–ø–∞
                    recent_rates[sym].append((now, r))

                    # ---------- –°–ò–õ–¨–ù–´–ô –ê–õ–ï–†–¢ (–Ω–∞–ø—Ä–∏–º–µ—Ä, -2.00%) ----------
                    current_pct = pct(r)  # —É–∂–µ –≤ %
                    if current_pct <= -STRONG_ALERT_PCT:
                        cooldown_ok = now >= (last_strong_alert_at[sym] + timedelta(minutes=STRONG_COOLDOWN_MIN))
                        if cooldown_ok:
                            # –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–º–ø –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º ~5 —Ç–æ—á–∫–∞–º
                            rate_list = [x for (_, x) in list(recent_rates[sym])[-5:]]
                            delta_bps = (bps(rate_list[-1]) - bps(rate_list[0])) if len(rate_list) >= 2 else 0.0

                            text = (
                                f"üî¥ <b>–°–ò–õ–¨–ù–´–ô –ê–õ–ï–†–¢</b> ‚Äî {sym}\n"
                                f"‚Ä¢ Funding: <b>{fmt_pct(r)}</b> (‚â§ -{STRONG_ALERT_PCT:.2f}%)\n"
                                f"‚Ä¢ –¢–µ–º–ø –∑–∞ ~{min(len(rate_list)*POLL_SECONDS//60, 5)}–º: <b>{delta_bps:.1f} –±.–ø.</b>\n"
                                f"‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è –≤—ã–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: <b>{human_eta_ms(nextT)}</b>"
                            )
                            for chat_id in subs:
                                try:
                                    await bot.send_message(chat_id, text)
                                except Exception as e:
                                    logging.warning(f"send_message error chat {chat_id}: {e}")

                            last_strong_alert_at[sym] = now
                            # —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç—É–ø–µ–Ω–∏, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å ¬´–æ–±—ã—á–Ω—ã–π¬ª –∞–ª–µ—Ä—Ç —ç—Ç–∏–º –∂–µ —Ç–∏–∫–æ–º
                            idx_now = step_index(abs(current_pct), start_neg_pct, step_pct)
                            last_step_idx[sym] = max(last_step_idx[sym], idx_now)
                            continue  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–∏–º–≤–æ–ª—É

                    # ---------- –û–ë–´–ß–ù–ê–Ø –õ–û–ì–ò–ö–ê (—Å—Ç—É–ø–µ–Ω–∏ –æ—Ç -1%) ----------
                    if current_pct > -start_neg_pct:
                        # –µ—Å–ª–∏ –¥–∞–≤–Ω–æ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç—É–ø–µ–Ω–∏
                        if (now - last_below_ts[sym]) > timedelta(minutes=RESET_MIN):
                            last_step_idx[sym] = -1
                        continue

                    # –º—ã –≤ –∑–æ–Ω–µ r <= ‚àí1% ‚Üí –æ—Ç–º–µ—Ç–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é "–Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞"
                    last_below_ts[sym] = now

                    # –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π —Å—Ç—É–ø–µ–Ω–∏ –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
                    idx = step_index(abs(current_pct), start_neg_pct, step_pct)
                    if idx > last_step_idx[sym] >= -1:
                        # –æ—Ü–µ–Ω–∏–º –ø—Ä–æ—Å—Ç–æ–π "—Ç–µ–º–ø" –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ç–æ—á–∫–∞–º (–¥–æ ~5 –∏–∑–º–µ—Ä–µ–Ω–∏–π)
                        rate_list = [x for (_, x) in list(recent_rates[sym])[-5:]]
                        delta_bps = (bps(rate_list[-1]) - bps(rate_list[0])) if len(rate_list) >= 2 else 0.0

                        text = (
                            f"‚ö†Ô∏è <b>{sym}</b> funding —É–≥–ª—É–±–ª—è–µ—Ç—Å—è:\n"
                            f"‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: <b>{fmt_pct(r)}</b>\n"
                            f"‚Ä¢ –°—Ç—É–ø–µ–Ω—å: <b>‚âà -{start_neg_pct + (idx+1)*step_pct:.2f}%</b> "
                            f"(–ø–æ—Ä–æ–≥ -{start_neg_pct:.2f}%, —à–∞–≥ {step_pct:.2f}%)\n"
                            f"‚Ä¢ –¢–µ–º–ø –∑–∞ ~{min(len(rate_list)*POLL_SECONDS//60, 5)}–º: <b>{delta_bps:.1f} –±.–ø.</b>\n"
                            f"‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è –≤—ã–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑: <b>{human_eta_ms(nextT)}</b>"
                        )

                        for chat_id in subs:
                            try:
                                await bot.send_message(chat_id, text)
                            except Exception as e:
                                logging.warning(f"send_message error chat {chat_id}: {e}")

                        last_step_idx[sym] = idx

                await asyncio.sleep(POLL_SECONDS)

            except Exception as e:
                logging.error(f"poll_loop error: {e}")
                await asyncio.sleep(POLL_SECONDS)

# ====== –ú–ò–ù–ò HEALTH-–°–ï–†–í–ï–† –î–õ–Ø –•–û–°–¢–ò–ù–ì–ê ======
async def start_health_server():
    async def health(_):
        return web.Response(text="ok")
    app = web.Application()
    app.router.add_get("/healthz", health)
    port = int(os.getenv("PORT", "8080"))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logging.info(f"Health server on :{port}")

# ====== –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢ ======
async def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN is missing")

    await db_init()

    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher(storage=MemoryStorage())

    @dp.message(CommandStart())
    async def start(m: Message):
        await add_sub(m.chat.id)
        await m.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª–µ–∂—É –∑–∞ funding rate –ø–æ <b>–≤—Å–µ–º</b> —Ñ—å—é—á–µ—Ä—Å–Ω—ã–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º Binance.\n\n"
            "–ü—Ä–∞–≤–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:\n"
            f"‚Ä¢ –ü–æ—Ä–æ–≥ –≤—Ö–æ–¥–∞: –Ω–∏–∂–µ <b>-{START_NEG_PCT:.2f}%</b>\n"
            f"‚Ä¢ –°—Ç—É–ø–µ–Ω–∏: <b>{STEP_BPS} –±.–ø.</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1.20%, -1.40%, ...)\n"
            f"‚Ä¢ –°–∏–ª—å–Ω—ã–π –∞–ª–µ—Ä—Ç: –ø—Ä–∏ ‚â§ <b>-{STRONG_ALERT_PCT:.2f}%</b> (–∫—É–ª–¥–∞—É–Ω {STRONG_COOLDOWN_MIN} –º–∏–Ω)\n"
            f"‚Ä¢ –ü–µ—Ä–∏–æ–¥ –æ–ø—Ä–æ—Å–∞: <b>{POLL_SECONDS}s</b>\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /subscribe ‚Äî –≤–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã\n"
            "‚Ä¢ /unsubscribe ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã\n"
            "‚Ä¢ /status ‚Äî —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
        )

    @dp.message(Command("subscribe"))
    async def sub(m: Message):
        await add_sub(m.chat.id)
        await m.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞.")

    @dp.message(Command("unsubscribe"))
    async def unsub(m: Message):
        await remove_sub(m.chat.id)
        await m.answer("‚õî –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

    @dp.message(Command("status"))
    async def st(m: Message):
        await m.answer(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ –ü–æ—Ä–æ–≥ –≤—Ö–æ–¥–∞: -{START_NEG_PCT:.2f}%\n"
            f"‚Ä¢ –®–∞–≥ —Å—Ç—É–ø–µ–Ω–∏: {STEP_BPS} –±.–ø. (~{STEP_BPS/100:.2f}%)\n"
            f"‚Ä¢ –°–∏–ª—å–Ω—ã–π –∞–ª–µ—Ä—Ç: ‚â§ -{STRONG_ALERT_PCT:.2f}% (–∫—É–ª–¥–∞—É–Ω {STRONG_COOLDOWN_MIN} –º–∏–Ω)\n"
            f"‚Ä¢ –û–ø—Ä–æ—Å: {POLL_SECONDS} —Å–µ–∫\n"
            f"‚Ä¢ –°–±—Ä–æ—Å —Å—Ç—É–ø–µ–Ω–µ–π: –ø–æ—Å–ª–µ {RESET_MIN} –º–∏–Ω –≤–Ω–µ –∑–æ–Ω—ã"
        )

    loop = asyncio.get_event_loop()
    loop.create_task(start_health_server())
    loop.create_task(poll_loop(bot))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
